import{SphericalUtil}from"node-geometry-library";let latLngFrom,latLngTo;function autoCompletes(e){new Autocomplete("search",{selectFirst:!0,howManyCharacters:2,onSearch:({currentValue:e})=>{const t=`https://nominatim.openstreetmap.org/search?format=geojson&limit=5&city=${encodeURI(e)}`;return new Promise((e=>{fetch(t).then((e=>e.json())).then((t=>{e(t.features)})).catch((e=>{console.error(e)}))}))},onResults:({currentValue:e,matches:t,template:o})=>{const n=new RegExp(e,"gi");return 0===t?o:t.map((e=>`\n          <li class="loupe">\n            <p>\n              ${e.properties.display_name.replace(n,(e=>`<b>${e}</b>`))}\n            </p>\n          </li> `)).join("")},onSubmit:({object:t})=>{e.eachLayer((function(t){t.toGeoJSON&&e.removeLayer(t)}));const{display_name:o}=t.properties,[n,r]=t.geometry.coordinates;latLngFrom={lat:t.geometry.coordinates[0],lng:t.geometry.coordinates[1]},console.log("submit"),L.marker([r,n],{title:o}).addTo(e).bindPopup(o),e.setView([r,n],8)},onSelectedItem:({index:e,element:t,object:o})=>{},noResults:({currentValue:e,template:t})=>t(`<li>No results found: "${e}"</li>`)}),new Autocomplete("search2",{selectFirst:!0,howManyCharacters:2,onSearch:({currentValue:e})=>{const t=`https://nominatim.openstreetmap.org/search?format=geojson&limit=5&city=${encodeURI(e)}`;return new Promise((e=>{fetch(t).then((e=>e.json())).then((t=>{e(t.features)})).catch((e=>{console.error(e)}))}))},onResults:({currentValue:e,matches:t,template:o})=>{const n=new RegExp(e,"gi");return 0===t?o:t.map((e=>`\n          <li class="loupe">\n            <p>\n              ${e.properties.display_name.replace(n,(e=>`<b>${e}</b>`))}\n            </p>\n          </li> `)).join("")},onSubmit:({object:t})=>{e.eachLayer((function(t){t.toGeoJSON&&e.removeLayer(t)}));const{display_name:o}=t.properties,[n,r]=t.geometry.coordinates;latLngTo={lat:t.geometry.coordinates[0],lng:t.geometry.coordinates[1]},L.marker([r,n],{title:o}).addTo(e).bindPopup(o),e.setView([r,n],8)},onSelectedItem:({index:e,element:t,object:o})=>{},noResults:({currentValue:e,template:t})=>t(`<li>No results found: "${e}"</li>`)})}const getDistance=()=>SphericalUtil.computeDistanceBetween(latLngFrom,latLngTo);export{autoCompletes,getDistance};